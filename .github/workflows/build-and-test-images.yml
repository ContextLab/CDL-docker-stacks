name: Build, Test & Push Images

on:
  pull_request:
    # may have to change this to pull_request_target in order for secrets to be accessible
    branches:
      - master
    paths:
      - '**/Dockerfile'
      - '**/ci/**'
      - 'CI-classes/**'
      - conftest.py
  push:
    branches:
      - master
    paths:
      - '**/Dockerfile'
      - '**/ci/**'
      - 'CI-classes/**'
      - conftest.py
      - .github/workflows/*
defaults:
  run:
    shell: bash
env:
  DOCKER_HUB_ORG: contextlab

jobs:
  parse-changes:
    name: "Determine Images to Rebuild and Push (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      PREVIOUS_SHA: ${{ github.event.before }}
    outputs:
      artifact-dir: ${{ steps.get-images.outputs.artifact-dir }}
      to-retest-3_6: ${{ steps.get-images.outputs.to-retest-3_6 }}
      to-retest-3_7: ${{ steps.get-images.outputs.to-retest-3_7 }}
      to-retest-3_8: ${{ steps.get-images.outputs.to-retest-3_8 }}
      to-rebuild-3_6: ${{ steps.get-images.outputs.to-rebuild-3_6 }}
      to-rebuild-3_7: ${{ steps.get-images.outputs.to-rebuild-3_7 }}
      to-rebuild-3_8: ${{ steps.get-images.outputs.to-rebuild-3_8 }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install GitPython
        run: pip install GitPython==3.1.8

      - name: Determine Images to Rebuild and Push
        id: get-images
        shell: python
        run: |
          import sys
          from os import getenv
          from pathlib import Path
          from git import Repo

          sys.path.insert(0, 'CI-classes')
          from image_tree import ImageTree
          sys.path.pop(0)

          trigger_event = getenv("GITHUB_EVENT_NAME")
          python_version = getenv("PYTHON_VERSION")
          repo_path = getenv("GITHUB_WORKSPACE")
          old_sha = getenv("PREVIOUS_SHA")
          new_sha = getenv("GITHUB_SHA")

          repo = Repo(repo_path)
          old_state = repo.commit(old_sha)
          new_state = repo.commit(new_sha)
          diff_tree = new_state.diff(old_state)

          retest_all = False
          triggers_retest_all = ['.github/workflows', 'CI-classes', 'conftest.py']
          to_retest = []
          to_rebuild = []

          for diff in diff_tree:
              filepath = Path(diff.b_path)
              outer_dir = filepath.parts[0]
              filename = filepath.name
              if any(str(filepath).startswith(i) for i in triggers_retest_all):
                  retest_all = True
              elif outer_dir.startswith('cdl-'):
                  if filename != 'README.md':
                      to_retest.append(outer_dir)
                      if filepath.parts[1] != 'ci':
                          to_rebuild.append(outer_dir)

          to_retest = set(to_retest)
          to_rebuild = set(to_rebuild)
          image_tree = ImageTree(repo_path)
          linesep = '\n\t'

          if retest_all:
              to_retest = ':'.join(image_tree.all_images)
              print("CI test-related file edited. Re-running tests on all images")
          elif len(to_retest) == 0:
              to_retest = 0
              print(f"no images to re-test for Python {python_version}")
          else:
              to_retest = image_tree.get_dependents(to_retest)
              print(f"Re-running tests on {len(to_retest)} images:\n\t{linesep.join(to_retest)}")
              to_retest = ':'.join(to_retest)

          if len(to_rebuild) == 0:
              print(f"no image specs modified since {old_sha}. All images will be pulled instead of rebuilt")
              to_rebuild = 0
          else:
              to_rebuild = image_tree.get_dependents(to_rebuild)
              print(f"Rebuilding {len(to_rebuild)} image specs & downstream images changed since {old_sha}:\n\t{linesep.join(to_rebuild)}")
              to_rebuild = ':'.join(to_rebuild)

          if trigger_event == 'push':
              print('Workflow triggered by push to master. Any rebuilt images will be pushed to Docker Hub')
              push_images = 1
          else:
              print(f"Workflow triggered by non-push event: {trigger_event}. Skipping push to Docker Hub")
              push_images = 0

          py_v = python_version.replace('.', '_')
          to_retest_command = f"::set-output name=to-retest-{py_v}::{to_retest}"
          to_rebuild_command = f"::set-output name=to-rebuild-{py_v}::{to_rebuild}"
          push_images_command = f"::set-output name=push-images-{py_v}::{push_images}"
          print(to_retest_command)
          print(to_rebuild_command)
          print(push_images_command)

          artifact_dir = str(Path(repo_path).parent.joinpath('artifacts'))
          set_artifact_dir_command = f"::set-output name=artifact-dir::{artifact_dir}"
          print(set_artifact_dir_command)

  rebuild-images:
    name: "Rebuild Updated Images and Dependents (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: parse-changes
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      ARTIFACT_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}
      BUILD_DATA_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/build-data
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
        # has to be a separate step because variables set via set-env aren't
        # accessible until the next step
      - name: Format Output Accessor Key
        run: |
          to_rebuild_key="to-rebuild-${PYTHON_VERSION//./_}"
          echo "::set-env name=TO_REBUILD_KEY::$to_rebuild_key"

      - name: Check for Images to Rebuild
        run: |
          to_rebuild=${{ needs.parse-changes.outputs[env.TO_REBUILD_KEY] }}
          echo "::set-env name=TO_REBUILD::$to_rebuild"

      - name: Clone Repo
        if: env.TO_REBUILD != 0
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Rebuild and Export Updated Images
        if: env.TO_REBUILD != 0
        run: |
          TMPIFS=$IFS
          IFS=':' read -r -a to_rebuild <<< "$TO_REBUILD"
          IFS=$TMPIFS

          mkdir -p $BUILD_DATA_DIR
          mkdir -p $IMAGE_DIR

          images_logfile="$BUILD_DATA_DIR/images_python$PYTHON_VERSION.txt"
          buildtimes_logfile="$BUILD_DATA_DIR/buildtimes_python$PYTHON_VERSION.txt"

          for img in "${to_rebuild[@]}"; do
              echo "Building $img..."
              source "$GITHUB_WORKSPACE/$img/ci/builds.sh"

              SECONDS=0
              build_default
              duration=$SECONDS

              echo "finished in $duration"
              echo "Exporting $img..."
              docker save "$DOCKER_HUB_ORG/$img" | gzip > "$IMAGE_DIR/$img.tar.gz"
              echo "$img" >> "$images_logfile"
              echo "$duration" >> "$buildtimes_logfile"
          done

      - name: Upload Build Data Artifacts
        if: env.TO_REBUILD != 0
        uses: actions/upload-artifact@v2
        with:
          name: build-data
          path: $BUILD_DATA_DIR

      - name: Upload Compressed Image Artifacts
        if: env.TO_REBUILD != 0
        uses: actions/upload-artifact@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

  create-test-matrix:
    name: Create Test Job Matrix
    runs-on: ubuntu-latest
    needs: [parse-changes, rebuild-images]
    env:
      PARSE_CHANGES_OUTPUT: ${{ toJson(needs.parse-changes.outputs) }}
    outputs:
      test-matrix: ${{ steps.create-matrix.outputs.test-matrix }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Create Matrix
        id: create-matrix
        shell: python
        run: |
          import json
          from os import getenv
          from pathlib import Path

          includes = list()
          parse_changes_output = json.loads(getenv("PARSE_CHANGES_OUTPUT"))

          for k, v in parse_changes_output.items():
              if k.startswith('to-retest-') and v != 0:
                  py_version = k.split('-')[-1].replace('_', '.')
                  images = v.split(':')
                  for img in images:
                      includes.append({'image': img, 'python-version': py_version, 'build-style': 'default'})
                      if img != 'cdl-base':
                          includes.append({'image': img, 'python-version': py_version, 'build-style': 'custom'})

          matrix = {'include': includes}
          print(f'TEST MATRIX JOBS:\n{json.dumps(matrix, indent=4)}')
          matrix_json = json.dumps(matrix).replace(' ', '')
          print(matrix_json)
          print("::set-output name=test-matrix::matrix_json")

  test-images:
    runs-on: ubuntu-latest
    needs: [create-test-matrix, parse-changes]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-test-matrix.outputs.test-matrix) }}
    name: "Test ${{ matrix.image }} (Python ${{ matrix.python-version }}, ${{ matrix.build-style }} build)"
    env:
      IMAGE_NAME: ${{ matrix.image }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      BUILD_STYLE: ${{ matrix.build-style }}
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: mkdir -p $IMAGE_DIR

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # [3.6.11, 3.7.8, 3.8.5] according to
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
          python-version: ${{ matrix.python-version }}

      - name: Install Python Packages for Tests
        run: |
          pip install \
              docker==4.3.1 \
              pytest==6.0.1 \
              pytest-ordering==0.6

      - name: Determine Download Artifact vs Pull Preferences
        shell: python
        env:
          PARSE_CHANGES_OUTPUT: ${{ toJson(needs.parse-changes.outputs) }}
        run: |
          import json
          from os import getenv

          image_name = getenv("IMAGE_NAME")
          python_version = getenv("PYTHON_VERSION")
          build_style = getenv("BUILD_STYLE")

          if build_style == 'custom':
              pref = 'build'
          else:
              parse_changes_output = json.loads(getenv("PARSE_CHANGES_OUTPUT"))
              py_version_rebuilds = parse_changes_output[f"to-rebuild-{python_version.replace('.', '_')}"]
              py_version_rebuilds = py_version_rebuilds.split(':')
              if image_name in py_version_rebuilds:
                  pref = 'build'
              else:
                  pref = 'pull'

          print("::set-env name=pref::pref")

      - name: "Download Python $PYTHON_VERSION Image Artifacts"
        if: env.pref == 'build'
        uses: actions/download-artifact@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

      - name: Load Pre-Built Images from Artifacts
        if: env.pref == 'build'
        working-directory: $IMAGE_DIR
        run: |
          for img_archive in {.,}*; do
              docker load -i $img_archive
          done

      - name: Build Custom Image with build-args
        if: matrix.build-style == 'custom'
        working-directory: "$GITHUB_WORKSPACE/$IMAGE_NAME"
        run: |
          docker rmi $DOCKER_HUB_ORG/$IMAGE_NAME
          source ci/builds.sh
          build_custom

      - name: Pull Image from Docker Hub
        if: env.pref == 'pull'
        run: |
          if [[ "$IMAGE_NAME" == "cdl-base" ]]; then
              image_tag="latest"
          else:
              image_tag="$PYTHON_VERSION"
          fi

          docker pull $DOCKER_HUB_ORG/$IMAGE_NAME:$image_tag

      - name: Run Tests
        run: pytest -v

  push-to-docker-hub:
    name: "Push Updated Images to Docker Hub (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: [test-images, parse-changes]
    if: github.repository_owner == 'ContextLab' && github.event_name == 'push'
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
      - run: |
          to_rebuild_key="to-rebuild-${PYTHON_VERSION//./_}"
          echo "::set-env name=TO_REBUILD_KEY::$to_rebuild_key"

      - name: Check for Images to Push
        run: |
          to_push=${{ needs.parse-changes.outputs[env.TO_REBUILD_KEY] }}
          echo "::set-env name=TO_PUSH::$to_push"

      - name: "Download Python $PYTHON_VERSION Image Artifacts"
        if: env.TO_PUSH != 0
        uses: actions/download-artifacts@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

      - name: Load Pre-Built Images from Artifacts
        if: env.TO_PUSH != 0
        working-directory: $IMAGE_DIR
        run: |
          for img_archive in *; do
              docker load -i $img_archive
          done

      - name: Log into Docker Hub
        if: env.TO_PUSH != 0
        run: echo $"{{ secrets.DOCKER_HUB_PASSWORD }} | docker login \
                --username $DOCKER_HUB_ORG --password-stdin

      - name: Push Images to Docker Hub
        if: env.TO_PUSH != 0
        working-directory: $IMAGE_DIR
        run: |
          for img_file in *; do
              img=$(echo $img_file | cut -d '.' -f 1)
              if [[ "$img" == "cdl-base" ]]; then
                  if [[ "$PYTHON_VERSION" == "3.8" ]]; then
                      docker push "$DOCKER_HUB_ORG/$img:latest"
                  fi
              else
                  docker push "$DOCKER_HUB_ORG/$IMG:$PYTHON_VERSION"
