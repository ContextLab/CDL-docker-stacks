name: Build and Test Images

on:
  pull_request:
    # may have to change this to pull_request_target in order for secrets to be accessible
    branches:
      - master
    paths:
      - '**/Dockerfile'
      - '**/ci/'
      - 'CI-classes/'
      - conftest.py
  push:
    branches:
      - master
    paths:
      - '**/Dockerfile'
      - '**/ci/'
      - 'CI-classes/'
      - conftest.py
      - .github/workflows/*
defaults:
  run:
    shell: bash

jobs:
  parse-changes:
    name: "Determine Images to Rebuild and Push (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      PREVIOUS_SHA: ${{ github.event.before }}"
    outputs:
      artifact-dir: ${{ steps.get-images.outputs.artifact-dir }}
      to-rebuild-3_6: ${{ steps.get-images.outputs.to-rebuild-3_6 }}
      to-rebuild-3_7: ${{ steps.get-images.outputs.to-rebuild-3_7 }}
      to-rebuild-3_8: ${{ steps.get-images.outputs.to-rebuild-3_8 }}
      to-push-3_6: ${{ steps.get-images.outputs.to-push-3_6 }}
      to-push-3_7: ${{ steps.get-images.outputs.to-push-3_7 }}
      to-push-3_8: ${{ steps.get-images.outputs.to-push-3_8 }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install GitPython
        run: pip install GitPython==3.1.8

      - name: Determine Images to Rebuild and Push
        id: get-images
        shell: python
        run: |
          import sys
          from os import getenv
          from pathlib import Path
          from git import Repo

          sys.path.insert(0, 'CI-classes')
          from image_tree import ImageTree
          sys.path.pop(0)

          trigger_event = getenv("GITHUB_EVENT_NAME")
          python_version = getenv("PYTHON_VERSION")
          repo_path = getenv("GITHUB_WORKSPACE")
          old_sha = getenv("PREVIOUS_SHA")
          new_sha = getenv("GITHUB_SHA")

          repo = Repo(repo_path)
          old_state = repo.commit(old_sha)
          new_state = repo.commit(new_sha)
          diff_tree = new_state.diff(old_state)

          rebuild_all = False
          trigger_rebuild_all = ['.github/workflows', 'CI-classes', 'conftest.py']
          edited_images = []
          edited_image_dirs = []

          for diff in diff_tree:
              filepath = Path(diff.b_path)
              outer_dir = filepath.parts[0]
              filename = filepath.parts[-1]
              if any(str(filepath).startswith(i) for i in trigger_rebuild_all):
                  rebuild_all = True

              if outer_dir.startswith('cdl-'):
                  edited_image_dirs.append(outer_dir)

              if filename == 'Dockerfile':
                  edited_images.append(outer_dir)

          edited_image_dirs = set(edited_image_dirs)
          image_tree = ImageTree(repo_path)
          linesep = '\n\t'

          if rebuild_all:
              to_rebuild = ':'.join(image_tree.all_images)
              print("General-purpose file edited. Rebuilding all images")
          elif len(to_rebuild) == 0:
              to_rebuild = 0
              print(f"no images to rebuild for Python {python_version}")
          else:
              to_rebuild = image_tree.get_dependents(edited_image_dirs)
              print(f"{len(to_rebuild)} images will be rebuilt:\n\t{linesep.join(to_rebuild)}")
              to_rebuild = ':'.join(to_rebuild)

          if trigger_event == 'push':
              if len(to_push) == 0:
                  print(f"no Dockerfiles modified since {old_sha}. Skipping push to Docker Hub")
                  to_push = 0
              else:
                  to_push = image_tree.get_dependents(edited_images)
                  print(f"{len(to_push)} images will be pushed to Docker Hub:\n\t{linesep.join(to_push)}")
                  to_push = ':'.join(to_push)
          else:
              print(f"Workflow triggered by non-push event: {trigger_event}. Skipping push to Docker Hub")
              to_push = 0

          py_v = python_version.replace('.', '_')
          to_rebuild_command = f"::set-output name=to-rebuild-{py_v}::{to_rebuild}"
          to_push_command = f"::set-output name=to-push-{py_v}::{to_push}"
          print(to_rebuild_command)
          print(to_push_command)

          artifact_dir = str(Path(repo_dir).parent.joinpath('artifacts'))
          set_artifact_dir_command = f"::set-output name=artifact-dir::{artifact_dir}"
          print(set_artifact_dir_command)

  rebuild-images:
    name: "Rebuild Updated Images and Dependents (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: parse-changes
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      ARTIFACT_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}
      BUILD_DATA_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/build-data
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
      - name: Check for Images to Rebuild
        run: |
          to_rebuild_key="to-rebuild-${PYTHON_VERSION//./_}"
          echo "::set-env name=TO_REBUILD_KEY::$to_rebuild_key"
          to_rebuild=${{ needs.parse-changes.outputs[env.to_rebuild_key] }}
          echo "::set-env name=TO_REBUILD::$to_rebuild"

      - name: Clone Repo
        if: env.TO_REBUILD != 0
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Rebuild and Export Images
        run: |
          TMPIFS=$IFS
          IFS=':' read -r -a to_rebuild <<< "$TO_REBUILD"
          IFS=$TMPIFS

          mkdir -p $BUILD_DATA_DIR
          mkdir -p $IMAGE_DIR

          images_logfile="$BUILD_DATA_DIR/images_python$PYTHON_VERSION.txt"
          buildtimes_logfile="$BUILD_DATA_DIR/buildtimes_python$PYTHON_VERSION.txt"

          for img in "${to_rebuild[@]}"; do
              echo "Building $img..."
              source "$GITHUB_WORKSPACE/$img/ci/builds.sh"

              SECONDS=0
              build_default
              duration=$SECONDS

              echo "finished in $duration"
              echo "Exporting $img..."
              docker save "$DOCKER_HUB_ORG/$img" | gzip > "$IMAGE_DIR/$img.tar.gz"
              echo "$img" >> "$images_logfile"
              echo "$duration" >> "$buildtimes_logfile"
          done

      - name: Upload Build Data Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-data
          path: $BUILD_DATA_DIR

      - name: Upload Compressed Image Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

  create-test-matrix:
    name: Create Test Job Matrix
    runs-on: ubuntu-latest
    needs: rebuild-images
    env:
      BUILD_DATA_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/build-data
    outputs:
      test-matrix: ${{ steps.create-matrix.outputs.test-matrix }}

    steps:
      - run: mkdir -p $BUILD_DATA_DIR

      - name: Download Build Data Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-data
          path: $BUILD_DATA_DIR

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Create Test Matrix
        id: create-matrix
        shell: python
        run: |
          import json
          from os import getenv
          from pathlib import Path

          data_dir = Path(getenv('BUILD_DATA_DIR')).resolve()
          includes = list()
          for f in data_dir.glob('images*'):
              py_version = f.stem.replace('images_python', '')
              images = f.read_text().splitlines()
              for img in images:
                  includes.append({'image': img, 'python-version': py_version, 'build-style': 'default'})
                  if img != 'cdl-base':
                      includes.append({'image': img, 'python-version': py_version, 'build-style': 'custom'})

          matrix = {'include': includes}
          print(f'TEST MATRIX JOBS:\n\n{json.dumps(matrix, indent=4)}')
          matrix_json = json.dumps(matrix)
          print("::set-output name=test-matrix::matrix_json")

  test-images:
    name: "Test ${{ matrix.image }} (Python ${{ matrix.python-version }}, ${{ matrix.build-style }} build)"
    runs-on: ubuntu-latest
    needs: [rebuild-images, create-test-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-test-matrix.outputs.test-matrix) }}
    env:
      IMAGE_NAME: ${{ matrix.image }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      BUILD_STYLE: ${{ matrix.build-style }}
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: mkdir -p $IMAGE_DIR

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # [3.6.11, 3.7.8, 3.8.5] according to
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
          python-version: 3.8

      - name: Install Python Packages for Tests
        run: |
          pip install \
              docker==4.3.1 \
              pytest==6.0.1 \
              pytest-ordering==0.6

      - name: "Download Python $PYTHON_VERSION Image Artifacts"
        uses: actions/download-artifact@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

      - name: Load Pre-Built Images from Artifacts
        working-directory: $IMAGE_DIR
        run: |
          for img_archive in {.,}*; do
              docker load -i $img_archive
          done

      - name: Build Custom Image with build-args
        if: matrix.build-style == 'custom'
        working-directory: "$GITHUB_WORKSPACE/$IMAGE_NAME"
        run: |
          docker rmi $DOCKER_HUB_ORG/$IMAGE_NAME
          source ci/builds.sh
          build_custom

      - name: Run Tests
        run: pytest -v

  push-to-docker-hub:
    name: Push Updated Images to Docker Hub
    runs-on: ubuntu-latest
    needs: [parse-changes, test-images]
    if: ${{ github.event_name == 'push' }}
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      DOCKER_HUB_ORG: contextlab
      IMAGE_DIR: ${{ needs.parse-changes.outputs.artifact-dir }}/images

    steps:
      - name: Check for Images to Push
        run: |
          to_push_key="to-push-${PYTHON_VERSION//./_}"
          echo "::set-env name=TO_PUSH_KEY::$to_push_key"
          to_push=${{ needs.parse-changes.outputs[env.to_push_key] }}
          echo "::set-env name=TO_PUSH::$to_push"

      - name: "Download Python $PYTHON_VERSION Image Artifacts"
        if: env.TO_PUSH != 0
        uses: actions/download-artifacts@v2
        with:
          name: "images-python$PYTHON_VERSION"
          path: $IMAGE_DIR

      - name: Load Pre-Built Images from Artifacts
        working-directory: $IMAGE_DIR
        run: |
          for img_archive in *; do
              docker load -i $img_archive
          done

      - name: Log into Docker Hub
        run: echo $"{{ secrets.DOCKER_HUB_PASSWORD }} | docker login \
                --username $DOCKER_HUB_ORG --password-stdin

      - name: Push Images to Docker Hub
        working-directory: $IMAGE_DIR
        run: |
          for img_file in *; do
              img=$(echo $img_file | cut -d '.' -f 1)
              if [[ "$img" == "cdl-base" ]]; then
                  if [[ "$PYTHON_VERSION" == "3.8" ]]; then
                      docker push "$DOCKER_HUB_ORG/$img:latest"
                  fi
              else
                  docker push "$DOCKER_HUB_ORG/$IMG:$PYTHON_VERSION"
